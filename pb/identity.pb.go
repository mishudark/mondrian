// Code generated by protoc-gen-go. DO NOT EDIT.
// source: identity.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	identity.proto

It has these top-level messages:
	CreateTicketRequest
	CreateTicketReply
	SigningKeyRequest
	SigningKeyReply
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateTicketRequest struct {
	UserToken string `protobuf:"bytes,1,opt,name=user_token,json=userToken" json:"user_token,omitempty"`
}

func (m *CreateTicketRequest) Reset()                    { *m = CreateTicketRequest{} }
func (m *CreateTicketRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTicketRequest) ProtoMessage()               {}
func (*CreateTicketRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateTicketRequest) GetUserToken() string {
	if m != nil {
		return m.UserToken
	}
	return ""
}

type CreateTicketReply struct {
	Ticket string `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
}

func (m *CreateTicketReply) Reset()                    { *m = CreateTicketReply{} }
func (m *CreateTicketReply) String() string            { return proto.CompactTextString(m) }
func (*CreateTicketReply) ProtoMessage()               {}
func (*CreateTicketReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateTicketReply) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

type SigningKeyRequest struct {
}

func (m *SigningKeyRequest) Reset()                    { *m = SigningKeyRequest{} }
func (m *SigningKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*SigningKeyRequest) ProtoMessage()               {}
func (*SigningKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type SigningKeyReply struct {
	// DER-encoded public key used to sign JWTs on this server.
	SigningKey []byte `protobuf:"bytes,1,opt,name=signing_key,json=signingKey,proto3" json:"signing_key,omitempty"`
}

func (m *SigningKeyReply) Reset()                    { *m = SigningKeyReply{} }
func (m *SigningKeyReply) String() string            { return proto.CompactTextString(m) }
func (*SigningKeyReply) ProtoMessage()               {}
func (*SigningKeyReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SigningKeyReply) GetSigningKey() []byte {
	if m != nil {
		return m.SigningKey
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateTicketRequest)(nil), "pb.CreateTicketRequest")
	proto.RegisterType((*CreateTicketReply)(nil), "pb.CreateTicketReply")
	proto.RegisterType((*SigningKeyRequest)(nil), "pb.SigningKeyRequest")
	proto.RegisterType((*SigningKeyReply)(nil), "pb.SigningKeyReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Mondrian service

type MondrianClient interface {
	// CreateTicket creates a temporary token, called ticket, this has a
	// limited timelife and is used in requests to a service in behalf of the user,
	// the provided ticket should be used to any consecutive call, ideally should
	// be sent on  `ticket` header
	// (authorization header is tipically used by service to service)
	CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*CreateTicketReply, error)
	SigningKey(ctx context.Context, in *SigningKeyRequest, opts ...grpc.CallOption) (*SigningKeyReply, error)
}

type mondrianClient struct {
	cc *grpc.ClientConn
}

func NewMondrianClient(cc *grpc.ClientConn) MondrianClient {
	return &mondrianClient{cc}
}

func (c *mondrianClient) CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*CreateTicketReply, error) {
	out := new(CreateTicketReply)
	err := grpc.Invoke(ctx, "/pb.Mondrian/CreateTicket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mondrianClient) SigningKey(ctx context.Context, in *SigningKeyRequest, opts ...grpc.CallOption) (*SigningKeyReply, error) {
	out := new(SigningKeyReply)
	err := grpc.Invoke(ctx, "/pb.Mondrian/SigningKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Mondrian service

type MondrianServer interface {
	// CreateTicket creates a temporary token, called ticket, this has a
	// limited timelife and is used in requests to a service in behalf of the user,
	// the provided ticket should be used to any consecutive call, ideally should
	// be sent on  `ticket` header
	// (authorization header is tipically used by service to service)
	CreateTicket(context.Context, *CreateTicketRequest) (*CreateTicketReply, error)
	SigningKey(context.Context, *SigningKeyRequest) (*SigningKeyReply, error)
}

func RegisterMondrianServer(s *grpc.Server, srv MondrianServer) {
	s.RegisterService(&_Mondrian_serviceDesc, srv)
}

func _Mondrian_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MondrianServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Mondrian/CreateTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MondrianServer).CreateTicket(ctx, req.(*CreateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mondrian_SigningKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SigningKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MondrianServer).SigningKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Mondrian/SigningKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MondrianServer).SigningKey(ctx, req.(*SigningKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mondrian_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Mondrian",
	HandlerType: (*MondrianServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTicket",
			Handler:    _Mondrian_CreateTicket_Handler,
		},
		{
			MethodName: "SigningKey",
			Handler:    _Mondrian_SigningKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identity.proto",
}

func init() { proto.RegisterFile("identity.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x4c, 0x49, 0xcd,
	0x2b, 0xc9, 0x2c, 0xa9, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x32,
	0xe1, 0x12, 0x76, 0x2e, 0x4a, 0x4d, 0x2c, 0x49, 0x0d, 0xc9, 0x4c, 0xce, 0x4e, 0x2d, 0x09, 0x4a,
	0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe5, 0xe2, 0x2a, 0x2d, 0x4e, 0x2d, 0x8a, 0x2f, 0xc9,
	0xcf, 0x4e, 0xcd, 0x93, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0xe2, 0x04, 0x89, 0x84, 0x80, 0x04,
	0x94, 0xb4, 0xb9, 0x04, 0x51, 0x75, 0x15, 0xe4, 0x54, 0x0a, 0x89, 0x71, 0xb1, 0x95, 0x80, 0xb9,
	0x50, 0xf5, 0x50, 0x9e, 0x92, 0x30, 0x97, 0x60, 0x70, 0x66, 0x7a, 0x5e, 0x66, 0x5e, 0xba, 0x77,
	0x6a, 0x25, 0xd4, 0x02, 0x25, 0x23, 0x2e, 0x7e, 0x64, 0x41, 0x90, 0x7e, 0x79, 0x2e, 0xee, 0x62,
	0x88, 0x50, 0x7c, 0x76, 0x6a, 0x25, 0xd8, 0x10, 0x9e, 0x20, 0xae, 0x62, 0xb8, 0x2a, 0xa3, 0x0e,
	0x46, 0x2e, 0x0e, 0xdf, 0xfc, 0xbc, 0x94, 0xa2, 0xcc, 0xc4, 0x3c, 0x21, 0x07, 0x2e, 0x1e, 0x64,
	0x27, 0x08, 0x89, 0xeb, 0x15, 0x24, 0xe9, 0x61, 0xf1, 0x8a, 0x94, 0x28, 0xa6, 0x44, 0x41, 0x4e,
	0xa5, 0x12, 0x83, 0x90, 0x15, 0x17, 0x17, 0xc2, 0x09, 0x42, 0x60, 0x65, 0x18, 0xee, 0x94, 0x12,
	0x46, 0x17, 0x06, 0xeb, 0x4d, 0x62, 0x03, 0x87, 0xa0, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x17,
	0x17, 0xa0, 0x1a, 0x53, 0x01, 0x00, 0x00,
}
